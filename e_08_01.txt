実施テキスト：達人に学ぶDB設計徹底指南書

実施者：玉利仁美
実施日：1月17日

[演習8−1] ビジネスロジックの実装方法の検討

[演習内容]
 本文で代理キーについて解説した際、テーブルに主キーを設定せず、重複行データを登録後に削除する、という間違った設計について触れました。しかし、主キーによる一意性制約に限らず、データが満たすべき様々な条件(ビジネスロジック)を、テーブルの制約ではなく、アプリケーションコードによって実装することは一般的に行われています。さて、このビジネスロジックをアプリケーションコードで実装することについて、以下の問いについて考えてください。

問い１．ビジネスロジックをアプリケーションコードで実装することの是非
問い２．ビジネスロジックをデータベースの「トリガー」で実装することの是非

回答

問い１．テーブルの制約のみでは、どうしても実装できないものがあると思うので、そういった面から考えるとアプリケーションコードを実装することは必要だと思います。ただ、アプリケーションコードを多用しすぎると、不整合が起きやすくなったり、処理に時間がかかってしまったりすると思うので、テーブル制約とアプリケーションコードの兼ね合いをしっかり考えるべきであると思います。

例えば、
テーブルの制約では、あらかじめ決めておきたい単純な条件を指定したいときに利用するべきだと思います。例えば、男女のどちらかしか入力できないようにするというものや、デフォルト値をあらかじめ決めておくというものに関してはテーブルの制約で実装するといいと思います。
アプリケーションコードでは、テーブルの制約では実現が困難なもの、例えば、他テーブルと他テーブルのキーを比べて大きいものといったような複雑なものについて実装する際に利用するといいと思います。

問い２．トリガーとはあるイベントが発生した際に自動的に実行される機能であり、これをビジネスロジックを実装する際に使用すれば、自動で処理を行ってくれると思いますが、気づかないうちにトリガーが実行されてしまったり、トリガーを実行する必要がないのにイベントを実施した際に実行されてしまったりされてしまいます。そのためトリガーが重たい処理だった場合、全体の処理速度が遅くなってしまうことがありえます。なのでトリガーを使う際はしっかり使いどころを考えて実施しなければならないと思います。自動で処理を行ってくれる機能は便利だと思うので本当に軽い処理のイベントを実施するときは必ず実施する必要があるものだけは使ってもいいのではないかと思います。

例えば、
”あるテーブル”内のデータを”ほかのテーブル”のデータと同じ値を持っているものとしたときに、”ほかのテーブル”に更新が入った際、整合性を保つために”あるテーブル”のデータを”ほかのテーブル”のデータで更新するというトリガーを作る際など、必ず実行が行われ整合性が保たれるで利用したらいいと思います。


参考資料：
SQLの制約の種類とその指定方法 <https://qiita.com/Uejun/items/de02b78adbc54868d40d>
SQL Server の CHECK 制約を作成する - SQL Server 入門 <http://sql55.com/t-sql/sql-server-check-constraint-1.php>
UNIQUE 制約と CHECK 制約 | Microsoft Docs <https://docs.microsoft.com/ja-jp/sql/relational-databases/tables/unique-constraints-and-check-constraints>
[SQL] 14. トリガー (SQL 非標準) 1 | TECHSCORE(テックスコア) <http://www.techscore.com/tech/sql/SQL14/14_01.html/>
